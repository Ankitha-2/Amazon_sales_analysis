-- Creating sellers table

Create Table sellers (
						seller_id varchar(50),
						seller_name varchar(50)
						);

Select * from sellers;

-- To select specific column

Select seller_name from sellers

-- Creating return table

Create Table returns (
					 	order_id varchar(50),
						return_id varchar(50)
					);

Select * from returns;

-- Creating products table

Create Table products (
						product_id varchar (50),
						product_name varchar(50),
						price float,
						cogs float
						);

Select * from products;

-- Creating orders table

Create Table orders (
						order_id varchar(50),
						order_date date,
						customer_id varchar (50),
						state varchar(50),
						category varchar(50),
					   	sub_category varchar(50),
						product_id varchar(50),
						price_per_unit float,
						quantity int,
						sale float,
	             		seller_id varchar(50)
						);

Select * from orders; 

-- Creating customers table

Create Table customers (
						customer_id varchar(50),
						customer_name varchar(50),	
						state varchar(50)
						);

Select * from customers;

-- Q1 How many products do we have in our data?

Select count(*) from products;

-- Using the Alias function?

Select count (product_id) as Total_products from products;

-- Q2 What is the total revenue generated?

Select sum(sale) as Total_revenue from orders;

-- Q3 How many products do we have?

Select count(*) from products;

-- Using Distinct Function?

Select count(distinct product_id) from orders;

-- Q4 Find out the top 5 order details by sales amount? using order by function

Select * from orders
order by sale desc
limit 5;

-- Q5 What is the average order value?

Select avg(sale) as Avg_value from orders;

-- Q6 What is the total sales for goa?

Select sum(sale) from orders
where state = 'Goa';

-- Q7 How many unique customers have placed orders?

Select count(distinct customer_id) from customers;

-- Q8 What is the highest sale amount? using Min/Max functions

Select max(sale) from orders;

-- different way to write same query

Select sale from orders 
order by sale desc
limit 1;

Select min(sale) from orders;

-- -- different way to write same query

Select sale from orders 
order by sale 
limit 1;

-- Q9 Find out the total sales for Goa, Punjab and Telangana?

Select sum(sale) from orders
where state = 'Goa' or state = 'Punjab' or state = 'Telangana';

-- different way to write same query using IN operator

Select sum(sale) from orders
where state in ('Goa' , 'Punjab' , 'Telangana');

-- Using Group By function

-- Q10 What is the total sales revenue generated by each state?

Select state, sum(sale)
from orders
where state is not null
group by state
order by state desc;

--Q11 Find top 3 products and revenue generated having revenue>30000

Select product_id, sum(sale)
from orders
group by product_id
having sum(sale)> 30000;

-- Q12 Which is the best selling month in 2022 based on revenue?
-- group by month
-- where year = 2022

Select 
	extract (month from order_date) as Month, 
	sum(sale) as Total_revenue
from orders
	where extract (year from order_date) = 2022
group by Month
	order by Total_revenue desc;

-- Q13 To extract current time and date

Select Current_date;

Select Current_time;

Select Extract(Month from Current_date);

Select Extract(year from Current_date);

Select Extract(minute from Current_time);


-- Joins

-- Inner join

Select 
		o.order_id,
		o.state,
		o.sale,
		c.customer_name,
		c.customer_id,
		o.customer_id
from  customers as c 
inner join
orders as o
on c.customer_id = o.customer_id;

/* -- Q14 Identify all orders that have been returned,
along with the details of the returns using Left join */

-- Joining 3 tables

Select 
		o.customer_id,
		c.customer_name,
		count(o.sale) as total_revenue
from returns as r
left join orders as o
on o.order_id = r.order_id
join customers as c
on o.customer_id = c.customer_id
where c.customer_name = 'Chirag'
group by o.customer_id, c.customer_name
order by count(o.sale) desc;



-- Joining 2 tables

SELECT 
    o.order_id,
    r.return_id,
    o.customer_id,
    COUNT(o.sale) AS total_revenue
FROM returns AS r
LEFT JOIN orders AS o
ON o.order_id = r.order_id
GROUP BY o.order_id, r.return_id, o.customer_id
ORDER BY total_revenue;

-- Right join

Select * from orders as o
right join returns as r
on o.order_id = r.order_id;

-- Full join

Select * from orders as o
full join returns as r
on o.order_id = r.order_id;

/* -- Q15 How many orders were placed by each customer, 
and what is their average order quantity? */

Select 	customer_id,
		count(order_id) as Total_orders,
		avg(quantity) as Average_orders
from orders
group bY customer_id
order by customer_id;

-- Q16 Which category has the highest average sale amount per order?

Select  category, 
		avg(sale) as Average_sale
from orders
group by category
order by Average_sale desc;

/* -- Q17 Identify the top 3 best-selling products (sub-categories)
in terms of total quantity sold? */

Select  sub_category, 
		sum(quantity) as Total_quantity
from orders
group by sub_category
order by Total_quantity desc
limit 3;

-- Q18 Find customer name and total orders, and total revenue

Select  o.customer_id,
		c.customer_name,
		count(o.order_id) as Total_orders,
		sum(o.sale) as Total_revenue
from orders as o
left join
customers as c
on o.customer_id = c.customer_id
group by o.customer_id, c.customer_name
order by o.customer_id; 

/* -- Q19 Find all instances where products have been sold, 
returned or both, along with the associated details. (Full join) 
*/

SELECT 	o.order_id,
		o.sale,
   	 	o.product_id AS sold_product_id,  
    	r.return_id AS returned_product_id
FROM orders as o
FULL JOIN returns as r
ON o.order_id = r.order_id
where r.return_id is not null
ORDER BY o.order_id;
or

Select 
		p.product_id,
		o.sale,
		r.return_id
from products as p
full join
orders as o
on o.product_id = p.product_id
full join
returns as r 
on r.order_id = o.order_id
where r.return_id is not null
	
-- Q20 Find top 5 customers based on total orders (qty) for 2022

Select customer_id, sum(quantity) as total_quantity
from orders
where extract (year from order_date) = 2022
group by customer_id
order by Total_quantity desc
limit 5;

-- Q21 Find out best-performing month of 2021 based on the total revenue generated

Select 	sum(sale) as Total_revenue,
		extract (month from order_date) as Month 
from orders
where extract (year from order_date) = 2021
group by Month
order by Total_revenue desc
Limit 1;

-- Q22 Retrieve all the columns from the orders table

Select * from orders;

-- Q23 List the name and prices of all products from the products table

Select 	product_name, 
		price 
from products;

-- Q24 Find orders with a sale amount greater than $100 from the orders table 

Select * from orders
where sale >100;

-- Q25 Calculate the total number of customers from the customer's table

Select count(*) as Total_customers
from customers;

-- Q26 List the products in ascending order of their prices from the products table

Select * from products
order by price;

-- Q27 Find the total count of orders and total sales by each seller_id

Select  seller_id,
		count(order_id) as Total_orders,
		sum(sale) as Total_sales
from orders
group by seller_id
order by seller_id;

-- Q28 Find out the total count of products from the products table 

Select  Count(Distinct product_id) as Total_count
from products;

/* -- Q29 Find the total count of orders and total sales for the  
category Furniture and technology using IN operator */

Select 	category,
		count(order_id) as Total_orders,
		sum(sale) as Total_sales
from orders
where Category in ('Furniture', 'Technology')
group by category;

-- Q30 Find the total number of returns

Select count(*) as Total_returns 
from returns;

-- Q31 Find the top 5 product_id and quantity sold and revenue generated 

Select  product_id,
		count(order_id) as total_orders,
		sum(quantity) as Quantity_sold, 
		sum(sale) as Total_revenue
from orders
group by product_id
order by Total_revenue desc
limit 5;

-- Q32 Find the top 3 states and revenue generated having revenue > 30000

Select  state,
		sum(sale) as Total_revenue
from orders
where state is not null
group by state
having sum(sale) > 30000 
order by total_revenue desc
limit 3;

-- Q 33 Top 5 products whose revenue has decreased compared to the previous year

Select * from orders
Select * from products

With last_year_sale
As
(
	Select
			product_id,
			sum(sale) as total_sale_previous_yr
	From orders
	Where extract (year from order_date) = extract(year from current_date)-2
	Group by product_id
),
current_year_sale
As
(
	Select
			product_id,
			sum(sale) as total_sale_current_yr
	From orders
	Where extract(year from order_date) = extract (year from current_date)-1
	group by product_id
)

Select
		ls.product_id,
		p.product_name,
		(ls.total_sale_previous_yr - cs.total_sale_current_yr) as Revenue_decreased
From last_year_sale as ls
Join
current_year_sale as cs
On ls.product_id = cs.product_id
Join 
products as p
On p.product_id = ls.product_id
Where ls.total_sale_previous_yr > cs.total_sale_current_yr
Order by Revenue_decreased desc
Limit 5

	
-- find top 5 products based on revenue year = 2023

Select
		p.product_id,
		p.product_name,
		extract (year from o.order_date) as year,
		sum(o.sale) as Total_revenue 
from orders as o
join products as p
on
p.product_id = o.product_id
where extract (year from o.order_date) = '2023'
group by p.product_id,p.product_name, year
order by total_revenue desc
limit 5

-- find top 5 products based on revenue year = 2022

Select
		p.product_id,
		p.product_name,
		extract (year from o.order_date) as year,
		sum(o.sale) as Total_revenue 
from orders as o
join products as p
on
p.product_id = o.product_id
where extract (year from o.order_date) = '2022'
group by p.product_id,p.product_name, year
order by total_revenue desc
limit 5

/*
employees table
emp_id, emp_name, manager_id
101,'ankitha',121
102,'rohith',102
103,'pavan',null
104,'akhil',128

Find out the manager name

*/

create table employees (
							emp_id int,
							emp_name varchar(10),
							manager_id int
						)

Insert into employees
values
(101,'ankitha',null),
(102,'rohith',101),
(103,'pavan',102),
(104,'akhil',101)

Select * from employees

	
Drop table employees

Select
		e1.emp_id,
		e1.emp_name,
		e1.manager_id,
		e2.emp_name as manager_name
from employees as e1
left join
employees as e2
on
e1.emp_id = e2.emp_id

--Self join 
	
Select
    e1.emp_id,
    e1.emp_name,
    e1.manager_id,
    e2.emp_name as manager_name
From 
    employees as e1
Left join 
    employees as e2 
on 
    e1.manager_id = e2.emp_id;

-- Cross join

Select
    e1.emp_id,
    e1.emp_name,
    e1.manager_id,
    e2.emp_name as manager_name
From 
    employees as e1
Cross join 
    employees as e2 
Where 
    e1.manager_id = e2.emp_id;